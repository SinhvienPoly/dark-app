// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(MEMBER)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  tags        String[]

  thumbail_id String?
  thumbnail   Image?  @relation("Thumbnail", fields: [thumbail_id], references: [id])

  video_id String?
  video    Image?  @relation("Video", fields: [video_id], references: [id])

  activate String @default("active")

  favourites Float?    @default(0)
  views      Float     @default(0)
  rating     Float     @default(5)
  comments   Comment[]

  category_for_videos CategoryForVideos[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id   String  @id @default(cuid())
  url  String?
  size Float?
  type String?
  name String? @unique

  Videos     Video[] @relation("Video")
  thumbnails Video[] @relation("Thumbnail")

  category Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(cuid())
  title    String
  image_id String?
  image    Image?  @relation(fields: [image_id], references: [id])

  category_for_videos CategoryForVideos[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryForVideos {
  id       String  @id @default(cuid())
  video_id String?
  video    Video?  @relation(fields: [video_id], references: [id])

  category_id String?
  category    Category? @relation(fields: [category_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([video_id, category_id])
}

model Comment {
  id       String  @id @default(cuid())
  video_id String?
  video    Video?  @relation(fields: [video_id], references: [id])
  note     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
